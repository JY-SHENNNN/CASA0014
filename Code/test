/* 
  Chrono Lumina Blinker Example for MKR1010
*/

// Include necessary libraries
#include <WiFiNINA.h>
#include <PubSubClient.h>
#include <utility/wifi_drv.h>   // Library to drive the RGB LED on the MKR1010
#include "arduino_secrets.h"    // Include sensitive data from arduino_secrets.h

/*
**** Please enter your sensitive data in the Secret tab/arduino_secrets.h
**** using format below:

#define SECRET_SSID "ssid name"
#define SECRET_PASS "ssid password"
#define SECRET_MQTTUSER "user name - eg student"
#define SECRET_MQTTPASS "password"
*/

// WiFi credentials
const char* ssid          = SECRET_SSID;
const char* password      = SECRET_PASS;
const char* mqtt_username = SECRET_MQTTUSER;
const char* mqtt_password = SECRET_MQTTPASS;

// MQTT configuration
const char* mqtt_server = "mqtt.cetools.org";
const int mqtt_port = 1884;
int status = WL_IDLE_STATUS;  // WiFi radio's status

// Define WiFi and MQTT clients
WiFiServer server(80);
WiFiClient wificlient;
WiFiClient mkrClient;
PubSubClient client(mkrClient);

// MQTT topic for the light
char mqtt_topic_demo[100];

void setup() {
  Serial.begin(115200);  // Start the serial monitor to show output
  delay(1000);

  WiFi.setHostname("Lumina zczqjs2");
  startWifi();

  client.setServer(mqtt_server, mqtt_port);
  Serial.println("Setup complete");
}

void loop() {
  // Ensure the Arduino is connected to the MQTT broker
  if (!client.connected()) {
    reconnectMQTT();
  }

  // Ensure we are connected to the WiFi
  if (WiFi.status() != WL_CONNECTED) {
    startWifi();
  }

  // Check for messages and send updates to the light
  sendmqttgreen();
  sendmqttred();
  sendmqttbrightness();
  sendmqttblue();
  clearLight();

  Serial.println("Sent a message");
  delay(500);  // Adjust delay for smoother operation
}

/* --- WiFi Functions --- */

void startWifi() {
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    while (true);  // Stop execution if WiFi module fails
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }

  int n = WiFi.scanNetworks();
  Serial.println("Scan done");
  if (n == 0) {
    Serial.println("No networks found");
  } else {
    Serial.print(n);
    Serial.println(" networks found");
    Serial.print("Trying to connect to: ");
    Serial.println(ssid);

    for (int i = 0; i < n; ++i) {
      String availablessid = WiFi.SSID(i);
      if (availablessid.equals(ssid)) {
        Serial.print("Connecting to ");
        Serial.println(ssid);
        WiFi.begin(ssid, password);

        while (WiFi.status() != WL_CONNECTED) {
          delay(600);
          Serial.print(".");
        }

        if (WiFi.status() == WL_CONNECTED) {
          Serial.println("Connected to " + String(ssid));
          break;
        } else {
          Serial.println("Failed to connect to " + String(ssid));
        }
      } else {
        Serial.print(availablessid);
        Serial.println(" - this network is not in my list");
      }
    }
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

/* --- MQTT Functions --- */

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "LuminaSelector";
    clientId += String(random(0xffff), HEX);

    if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Connected");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(". Try again in 5 seconds");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, int length) {
  // Handle incoming messages
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("]: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

bool publishMessage(const char* topic, const char* message) {
  if (client.publish(topic, message, false)) {
    Serial.println("Message published");
    return true;
  } else {
    Serial.println("Failed to publish message");
    return false;
  }
}

/* --- Light Control Functions --- */

void clearLight() {
  sprintf(mqtt_topic_demo, "student/CASA0014/light/%d/all/", 35);
  char mqtt_message[100];
  sprintf(mqtt_message, "{\"method\": \"clear\"}");
  delay(100);
  publishMessage(mqtt_topic_demo, mqtt_message);
}

void sendmqttgreen() {
  sprintf(mqtt_topic_demo, "student/CASA0014/light/%d/pixel/", 35);
  for (int j = 0; j < 12; j += 2) {
    char mqtt_message[100];
    sprintf(mqtt_message, "{\"pixelid\": %d, \"R\": 255, \"G\": 255, \"B\": 0, \"W\": 0}", j);
    delay(100);
    publishMessage(mqtt_topic_demo, mqtt_message);
  }
}

void sendmqttred() {
  sprintf(mqtt_topic_demo, "student/CASA0014/light/%d/pixel/", 35);
  for (int j = 0; j < 12; j++) {
    char mqtt_message[100];
    sprintf(mqtt_message, "{\"pixelid\": %d, \"R\": 255, \"G\": 0, \"B\": 0, \"W\": 0}", j);
    delay(100);
    publishMessage(mqtt_topic_demo, mqtt_message);
  }
}

void sendmqttblue() {
  sprintf(mqtt_topic_demo, "student/CASA0014/light/%d/pixel/", 35);
  for (int j = 0; j < 12; j++) {
    char mqtt_message[100];
    sprintf(mqtt_message, "{\"pixelid\": %d, \"R\": 0, \"G\": 0, \"B\": 255, \"W\": 0}", j);
    delay(100);
    publishMessage(mqtt_topic_demo, mqtt_message);
  }
}

void sendmqttbrightness() {
  sprintf(mqtt_topic_demo, "student/CASA0014/light/%d/brightness/", 35);
  char mqtt_message[100];
  sprintf(mqtt_message, "{\"brightness\": %d}", 110);
  publishMessage(mqtt_topic_demo, mqtt_message);
}
